% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_products.R
\name{fit_products}
\alias{fit_products}
\title{Fit product distributions to standardized gene expressions for a list of gene pairs.}
\usage{
fit_products(
  gene_pair_list,
  marginals,
  cov_mat,
  formula2,
  family2 = quasiproductr(),
  control = list(),
  ncores = ncores,
  preconstruct_smoother = TRUE
)
}
\arguments{
\item{gene_pair_list}{A data frame or matrix where each row represents a gene pair to be modeled.}

\item{marginals}{A matrix containing standardized expression values for each gene.}

\item{cov_mat}{A matrix or data frame of covariates used in fitting the GAM models.}

\item{formula2}{A string or formula specifying the GAM structure for modeling the product distribution.}

\item{family2}{The distribution family used in fitting the model. Default is \code{quasiproductr()}.}

\item{control}{A list of control parameters passed to the GAM fitting process.}

\item{ncores}{An integer specifying the number of cores to use for parallel processing.}

\item{preconstruct_smoother}{Logical; if \code{TRUE}, modifies the smoother to enable caching for faster computation. Default is \code{TRUE}.}
}
\value{
A list of fitted models, where each model corresponds to a gene pair from \code{gene_pair_list}.
}
\description{
This function fits product distributions to gene pairs using their standardized expression values.
It applies a Generalized Additive Model (GAM) to each pair of genes from \code{gene_pair_list} to model
the joint effect while incorporating covariates.
}
\examples{
data(test_data)
# Fit standardized marginals for gene expressions
marginals <- fit_marginals(
  gene_list = test_data$gene_list,
  count_mat = test_data$count_mat,
  cov_mat = test_data$cov_mat,
  formula1 = "layer_annotations",
  family1 = "nb",
  to = "gaussian",
  DT = TRUE,
  ncores = 2
)

# Fit product distributions for gene pairs
model_list <- fit_products(
  gene_pair_list = test_data$gene_pair_list,
  marginals = marginals,
  cov_mat = test_data$cov_mat,
  formula2 = "s(x1, x2, bs='tp', k=50)",
  family2 = quasiproductr(),
  control = list(),
  ncores = 2,
  preconstruct_smoother = TRUE
)

}
