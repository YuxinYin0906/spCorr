% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_marginals.R
\name{fit_marginals}
\alias{fit_marginals}
\title{Fit conditional margins to standard Gaussian distributions for a list of genes.}
\usage{
fit_marginals(
  gene_list,
  count_mat,
  cov_mat,
  formula1,
  family1,
  to = "gaussian",
  DT = TRUE,
  epsilon = 1e-06,
  ncores = ncores
)
}
\arguments{
\item{gene_list}{A vector of gene names or indices for which the conditional margins are to be fit.}

\item{count_mat}{A matrix of gene expression counts where rows represent genes and columns represent observations.}

\item{cov_mat}{A matrix or data frame of covariates used for fitting the marginal distributions.}

\item{formula1}{A formula object or string specifying the model to be used for marginal fitting (e.g., \code{~ covariate}).}

\item{family1}{The distribution family to be used for fitting. Supported options include \code{'gaussian'}, \code{'poisson'}, or \code{'nb'}.}

\item{to}{The target distribution to transform to. Options are \code{'uniform'} or \code{'gaussian'}. Default is \code{'gaussian'}.}

\item{DT}{A logical value indicating whether discrete transformation should be applied. Default is \code{TRUE}.}

\item{epsilon}{A small number to avoid boundary values during transformation. Default is \code{1e-6}.}

\item{ncores}{The number of cores to use for parallel processing.}

\item{model_list}{A list of fitted GAM model objects to be tested.}

\item{local_testing}{Logical; whether to perform local significance testing for each model. Default is \code{FALSE}.}
}
\value{
A matrix where each row represents the transformed values for a gene.

A list containing test results for each model in the input \code{model_list}.
Each element contains global test results (\code{global_p} and \code{edf}) and local test results.
}
\description{
This function applies marginal fitting and transforms each gene's expression to follow a standard Gaussian distribution.
}
\examples{
data(test_data)
# Fit standardized marginals for gene expressions
marginals <- fit_marginals(
  gene_list = test_data$gene_list,
  count_mat = test_data$count_mat,
  cov_mat = test_data$cov_mat,
  formula1 = "~ covariate",
  family1 = "nb",
  to = "gaussian",
  DT = TRUE,
  ncores = 2
)

# Fit product distributions for gene pairs
model_list <- fit_products(
  gene_pair_list = test_data$gene_pair_list,
  marginals = marginals,
  cov_mat = test_data$cov_mat,
  formula2 = "s(x1, x2, bs='tp', k=50)",
  family2 = quasiproductr(),
  control = list(),
  ncores = 2,
  preconstruct_smoother = TRUE
)

}
