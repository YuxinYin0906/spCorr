[{"path":"https://chexjiang.github.io/spCorr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Chenxin (Flora) Jiang Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://chexjiang.github.io/spCorr/articles/spCorr-2D.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modeling spatially varying gene correlation across 2D space","text":"tutorial demonstrates use spCorr () infer spot-level gene–gene correlations specified gene pairs, (ii) identify gene pairs exhibiting spatially varying correlation (SVC) patterns across 2D spatial space.","code":""},{"path":"https://chexjiang.github.io/spCorr/articles/spCorr-2D.html","id":"prepare-input-data","dir":"Articles","previous_headings":"","what":"Prepare input data","title":"Modeling spatially varying gene correlation across 2D space","text":"example, analyze subset human oral squamous cell carcinoma (OSCC) dataset generated using 10x Visium platform (sample 2 Arora et al., 2023). focus transcription factor (TF)–target gene pairs curated TRRUST v2 database. Now prepare input data spCorr analysis.","code":"## Load example spatial transcriptomics data # It contains two objects: counts (gene expression matrix) and cov_mat (spot-level covariates) load(url(\"https://figshare.com/ndownloader/files/58905268\")) # counts: gene expression count matrix (genes x spots) print(dim(counts)) #> [1] 15624  1747  # cov_mat: spot spatial coordinates and other spot-level covariates print(dim(cov_mat)) #> [1] 1747    5 head(cov_mat) #>                       x1    x2 cluster_annotations         pathologist_anno.x #> AAACATTTCCCGGATT-2 17022 16020                core                        SCC #> AAACCGGGTAGGTACC-2 12218  6043                  nc Lymphocyte Negative Stroma #> AAACCGTTCGTCCAGG-2 14740  8064                edge                        SCC #> AAACCTAAGCAGCCGG-2 18025 13992                  nc                        SCC #> AAACGAGACGGTTGAT-2 10469 13427                edge                        SCC #> AAACGGGCGTACGGGT-2 18027 15149          transitory                        SCC #>                    tumor_annotations #> AAACATTTCCCGGATT-2             tumor #> AAACCGGGTAGGTACC-2                nc #> AAACCGTTCGTCCAGG-2             tumor #> AAACCTAAGCAGCCGG-2             tumor #> AAACGAGACGGTTGAT-2             tumor #> AAACGGGCGTACGGGT-2             tumor  ## Load TF–target gene pairs tf_df <- readRDS(url(\"https://figshare.com/ndownloader/files/58905265\")) tf_df <- tf_df[tf_df$type==\"Activation\" | tf_df$type==\"Unknown\",] head(tf_df) #>      tf target       type               id #> 2  AATF CDKN1A    Unknown         17157788 #> 4  AATF    MYC Activation         20549547 #> 6  ABL1    BAX Activation         11753601 #> 9  ABL1  CCND2 Activation         15509806 #> 10 ABL1 CDKN1A Activation 11753601;9916993 #> 14 ABL1    JUN Activation         15145216 ## Create gene pair list (data frame format) gene_pair_list <- tf_df[, c(\"tf\", \"target\")] rownames(gene_pair_list) <- apply(gene_pair_list, 1, paste, collapse = \"_\")  ## Extract the unique set of genes from these pairs gene_list <- unique(c(gene_pair_list$tf, gene_pair_list$target))  ## Check summary cat(\"Number of selected gene pairs:\", nrow(gene_pair_list), \"\\n\") #> Number of selected gene pairs: 1316 cat(\"Number of unique genes:\", length(gene_list), \"\\n\") #> Number of unique genes: 601 head(gene_pair_list) #>               tf target #> AATF_CDKN1A AATF CDKN1A #> AATF_MYC    AATF    MYC #> ABL1_BAX    ABL1    BAX #> ABL1_CCND2  ABL1  CCND2 #> ABL1_CDKN1A ABL1 CDKN1A #> ABL1_JUN    ABL1    JUN"},{"path":"https://chexjiang.github.io/spCorr/articles/spCorr-2D.html","id":"run-spcorr","dir":"Articles","previous_headings":"","what":"Run spCorr","title":"Modeling spatially varying gene correlation across 2D space","text":"now apply spCorr infer spot-level gene–gene correlations selected gene pairs identify gene pairs spatially varying correlation (SVC) pattern across 2D spatial space.","code":"res <- spCorr(counts,              gene_list,              gene_pair_list,              cov_mat,              formula1 = \"tumor_annotations\",              family1 = \"nb\",              formula2 = \"s(x1, x2, bs='tp', k=30)\",              family2 = quasiproductr(),              DT = TRUE,              global_test = \"lrt\",              return_models = FALSE,              return_coefs = FALSE,              check_morani = FALSE,              preconstruct_smoother = FALSE,              ncores = 10,              seed = 123) #> Start Marginal Fitting for 601 genes #> Start Extracting Spatially Varying Gene Pairs #> Start Product Fitting for 1316 gene pairs str(res, max.level = 1) #> List of 6 #>  $ res_global  : Named num [1:1316] 0.483 0.0795 0.2519 0.42 0.5005 ... #>   ..- attr(*, \"names\")= chr [1:1316] \"AATF_CDKN1A\" \"AATF_MYC\" \"ABL1_BAX\" \"ABL1_CCND2\" ... #>  $ edf         : Named num [1:1316] 13.1 17.3 20.3 12.2 14.7 ... #>   ..- attr(*, \"names\")= chr [1:1316] \"AATF_CDKN1A\" \"AATF_MYC\" \"ABL1_BAX\" \"ABL1_CCND2\" ... #>  $ res_local   : num [1:1316, 1:1747] 0.226 0.67 0.57 0.633 0.233 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ res_local_pi:List of 1316 #>  $ residuals   : num [1:601, 1:1747] 0.237 0.251 0.231 0.244 0.201 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>  $ marginals   : num [1:601, 1:1747] -0.716 -0.67 -0.737 -0.694 -0.837 ... #>   ..- attr(*, \"dimnames\")=List of 2"},{"path":"https://chexjiang.github.io/spCorr/articles/spCorr-2D.html","id":"visualize-spot-level-correlations","dir":"Articles","previous_headings":"","what":"Visualize spot-level correlations","title":"Modeling spatially varying gene correlation across 2D space","text":"next visualize inferred spot-level correlations SVC patterns specific gene pairs. spot-level correlation estimates stored res$res_local, spot--gene pair matrix.","code":"# Specify gene pairs to visualize gene_pair <- c(\"ELF3_SPRR1B\", \"ELF3_SPRR3\", \"ELF3_SPRR2A\", \"ELF3_SPRR1A\", \"ELF3_CLDN7\") rho_mat <- t(res$res_local[gene_pair, , drop = FALSE])  # spots × gene pairs  # Combine with covariates and reshape to long format plot_data <- cbind(cov_mat, rho_mat) %>% as.data.frame() %>% pivot_longer(cols = all_of(gene_pair), names_to = \"gene_pair\", values_to = \"rho\")  p_corr <- ggplot(plot_data, aes(x = x2, y = -x1, color = rho)) +   geom_point(size = 0.3) + scale_color_gradientn(colors = viridis_pal(option = \"magma\")(10), name = \"correlation\") +   coord_fixed(ratio = 1) + labs(x = NULL, y = NULL) +   facet_wrap(~gene_pair, nrow = 1) +   theme_minimal() + theme(     axis.text = element_blank(),     panel.border = element_rect(color = \"black\", fill = NA, linewidth = 0.2),     strip.background = element_rect(color = \"black\", fill = NA, linewidth = 0.2)   ) p_corr"},{"path":"https://chexjiang.github.io/spCorr/articles/spCorr-2D.html","id":"identify-gene-pairs-with-significant-svc-patterns","dir":"Articles","previous_headings":"","what":"Identify gene pairs with significant SVC patterns","title":"Modeling spatially varying gene correlation across 2D space","text":"spCorr also provides SVC testing identify gene pairs whose correlations vary significantly across spatial locations. BH-adjusted p-values SVC testing stored res$res_global.","code":"pval_svc <- res$res_global gene_pair_sig <- which(pval_svc < 0.05) cat(\"Number of gene pairs with significant SVC patterns (FDR < 0.05):\", length(gene_pair_sig), \"\\n\") #> Number of gene pairs with significant SVC patterns (FDR < 0.05): 294"},{"path":"https://chexjiang.github.io/spCorr/articles/spCorr-2D.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Modeling spatially varying gene correlation across 2D space","text":"","code":"sessionInfo() #> R version 4.2.3 (2023-03-15) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] viridis_0.6.5     viridisLite_0.4.2 tidyr_1.3.1       dplyr_1.1.4       #> [5] ggplot2_4.0.0     spCorr_0.0.0.9000 BiocStyle_2.26.0  #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1    xfun_0.53           bslib_0.9.0         #>  [4] purrr_1.1.0         splines_4.2.3       lattice_0.22-6      #>  [7] vctrs_0.6.5         generics_0.1.4      htmltools_0.5.8.1   #> [10] yaml_2.3.10         mgcv_1.9-3          rlang_1.1.6         #> [13] pkgdown_2.1.3       jquerylib_0.1.4     pillar_1.11.1       #> [16] glue_1.8.0          withr_3.0.2         RColorBrewer_1.1-3  #> [19] S7_0.2.0            lifecycle_1.0.4     gtable_0.3.6        #> [22] ragg_1.5.0          htmlwidgets_1.6.4   evaluate_1.0.5      #> [25] labeling_0.4.3      knitr_1.50          fastmap_1.2.0       #> [28] parallel_4.2.3      Rcpp_1.1.0          scales_1.4.0        #> [31] BiocManager_1.30.26 cachem_1.1.0        desc_1.4.3          #> [34] jsonlite_2.0.0      farver_2.1.2        systemfonts_1.3.1   #> [37] fs_1.6.6            gridExtra_2.3       textshaping_1.0.4   #> [40] digest_0.6.37       bookdown_0.45       grid_4.2.3          #> [43] cli_3.6.5           tools_4.2.3         magrittr_2.0.4      #> [46] sass_0.4.10         tibble_3.3.0        dichromat_2.0-0.1   #> [49] ape_5.8-1           pkgconfig_2.0.3     Matrix_1.6-5        #> [52] rmarkdown_2.30      rstudioapi_0.17.1   R6_2.6.1            #> [55] nlme_3.1-164        compiler_4.2.3"},{"path":"https://chexjiang.github.io/spCorr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chenxin (Flora) Jiang. Author, maintainer.","code":""},{"path":"https://chexjiang.github.io/spCorr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jiang C (2025). spCorr: spCorr: flexible scalable inference spatially varying correlation spatial transcriptomics. R package version 0.0.0.9000.","code":"@Manual{,   title = {spCorr: spCorr: flexible and scalable inference of spatially varying correlation in spatial transcriptomics},   author = {Chenxin (Flora) Jiang},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"https://chexjiang.github.io/spCorr/index.html","id":"spcorr","dir":"","previous_headings":"","what":"spCorr: flexible and scalable inference of spatially varying correlation in spatial transcriptomics","title":"spCorr: flexible and scalable inference of spatially varying correlation in spatial transcriptomics","text":"R package spCorr flexible scalable framework detecting characterizing spatially varying correlations (SVCs) spatial transcriptomics data. provides (1) spot-level correlation estimates gene pairs (2) identifies gene pairs whose correlations vary across space tissue domains. spCorr supports flexible modeling spot-level covariates, directly models count data, enables efficient, permutation-free statistical inference. following figure illustrates workflow spCorr:","code":""},{"path":"https://chexjiang.github.io/spCorr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"spCorr: flexible and scalable inference of spatially varying correlation in spatial transcriptomics","text":"install development version GitHub, please run:","code":"if (!require(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") devtools::install_github(\"chexjiang/spCorr\")"},{"path":"https://chexjiang.github.io/spCorr/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"spCorr: flexible and scalable inference of spatially varying correlation in spatial transcriptomics","text":"following code quick example running spCorr. function spCorr() takes count_mat, gene_list, gene_pair_list, cov_mat (include spatial coordinates spot-level covariates). parameters spCorr() : count_mat: matrix counts rows represent genes columns represent observations. gene_list: list gene names conditional margins fit. gene_pair_list: data frame matrix containing pairs gene names (indices) analyzed. cov_mat: matrix covariates, including spatial coordinates spot-level covariates (e.g.: spot annotations). formula1: formula specifying model used fitting marginal distributions. spot-level covariate needs adjusted, set formula1 = \"1\". spot-level covariate need adjusted, specify formula1 = \"covariate_name\", covariate_name column name cov_mat representing spot-level covariate. family1: distribution family marginals (e.g., 'gaussian', 'poisson', 'nb'). formula2: formula specifying model fitting product distributions. Examples: \"s(x1, x2, bs='tp', k=50)\", \"s(x1, x2, bs='gp', k=50)\". family2: distribution family product model. Default quasiproductr(). DT: Logical; TRUE, applies discrete transformation suitable count data. Default TRUE. global_test: Method global testing product models. Options: \"lrt\" (likelihood ratio test) \"wald\" (Wald-style smooth term test). Default \"wald\". return_models: Logical; TRUE, return full GAM model objects. Default FALSE. return_coefs Logical; TRUE, return model coefficients covariance matrices. Default FALSE. check_morani: Logical; TRUE, filters gene pairs using Moran’s product. Default FALSE. preconstruct_smoother: Logical; TRUE, replaces bs='tp'/'gp' tpcached/gpcached faster computation. Default TRUE. ncores: Integer number cores parallel processing. Default 2. control: list control parameters passed mgcv::gam() product fitting. epsilon: small constant avoid boundary issues uniform--Gaussian transformation. Default 1e-6. seed: seed reproducibility. Default 123.","code":"spCorr <- function(count_mat,                    gene_list,                    gene_pair_list,                    cov_mat,                    formula1 = \"1\",                    family1 = \"nb\",                    formula2 = \"s(x1, x2, bs='tp', k=50)\",                    family2 = quasiproductr(),                    DT = TRUE,                    global_test = \"wald\",                    return_models = FALSE,                    return_coefs = FALSE,                    check_morani = FALSE,                    preconstruct_smoother = TRUE,                    ncores = 2,                    control = list(),                    epsilon = 1e-6,                    seed = 123)"},{"path":"https://chexjiang.github.io/spCorr/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"spCorr: flexible and scalable inference of spatially varying correlation in spatial transcriptomics","text":"detailed tutorials, please check website. tutorials demonstrate main functionalities spCorr, including spot-level correlation inference identification spatially varying correlation (SVC) patterns. Tutorial 1: Modeling spatially varying gene correlation across 2D space","code":""},{"path":"https://chexjiang.github.io/spCorr/index.html","id":"related-paper","dir":"","previous_headings":"","what":"Related Paper","title":"spCorr: flexible and scalable inference of spatially varying correlation in spatial transcriptomics","text":"Jiang, C., Yin, Y., Robson, P., Li, J. Y., Li, J. J., & Song, D. (2025). spCorr: flexible scalable inference spatially varying correlation spatial transcriptomics. bioRxiv, 2025-09.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/check_products.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and Subset Spatially Varying Cross Products — check_products","title":"Check and Subset Spatially Varying Cross Products — check_products","text":"Computes cross-products standardized gene expression values optionally filters gene pairs based spatial autocorrelation (Moran's ).","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/check_products.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and Subset Spatially Varying Cross Products — check_products","text":"","code":"check_products(   gene_pair_list,   marginals,   cov_mat,   ncores,   check_morani,   p_thresh = 0.05 )"},{"path":"https://chexjiang.github.io/spCorr/reference/check_products.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and Subset Spatially Varying Cross Products — check_products","text":"gene_pair_list data frame two columns representing pairs genes (name index). marginals matrix standardized gene expression values (e.g., output fit_marginals()). cov_mat data frame containing spatial coordinates (e.g., columns x1 x2). ncores Number CPU cores use parallel computation. check_morani Logical indicating whether filter based Moran's statistic. p_thresh P-value threshold filtering gene pairs Moran's . Default 0.05.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/check_products.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and Subset Spatially Varying Cross Products — check_products","text":"list : gene_pair_list_subset Filtered gene pair list (check_morani = TRUE) product_list List gene-wise expression cross-products #'","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/check_products.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and Subset Spatially Varying Cross Products — check_products","text":"","code":"if (FALSE) { # \\dontrun{ data(test_data) # Fit standardized marginals for gene expressions marginal_res <- fit_marginals(   gene_list = test_data$gene_list,   count_mat = test_data$count_mat,   cov_mat = test_data$cov_mat,   formula1 = \"layer_annotations\",   family1 = \"nb\",   DT = TRUE,   epsilon = 1e-6,   ncores = 2 ) # Check and subset spatially varying cross product check_result <- check_products(   gene_pair_list = test_data$gene_pair_list,   marginals = marginal_res$marginal,   cov_mat = test_data$cov_mat,   check_morani = FALSE, ,   ncores = 2 ) } # }"},{"path":"https://chexjiang.github.io/spCorr/reference/fit_marginals.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit conditional margins to standard Gaussian distributions for a list of genes. — fit_marginals","title":"Fit conditional margins to standard Gaussian distributions for a list of genes. — fit_marginals","text":"function applies marginal fitting transforms gene's expression follow standard Gaussian distribution.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fit_marginals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit conditional margins to standard Gaussian distributions for a list of genes. — fit_marginals","text":"","code":"fit_marginals(   gene_list,   count_mat,   cov_mat,   formula1,   family1,   DT = TRUE,   epsilon = 1e-06,   ncores = ncores,   seed = 123 )"},{"path":"https://chexjiang.github.io/spCorr/reference/fit_marginals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit conditional margins to standard Gaussian distributions for a list of genes. — fit_marginals","text":"gene_list vector gene names indices (row names row numbers count_mat) process. count_mat matrix raw gene expression counts. Rows correspond genes, columns observations (cells/spots). cov_mat matrix data frame covariates used marginal modeling (e.g., spatial coordinates experimental annotations). formula1 formula object string (e.g., \"~ covariate1 + covariate2\") specifying model structure mean. family1 string specifying distribution family used modeling. Supported values include \"gaussian\", \"poisson\", \"nb\", \"zinb\". DT Logical; TRUE, applies discrete transformation suitable count data. Default TRUE. epsilon small numeric constant avoid boundary issues (e.g., 0 1 values uniform distribution). Default 1e-6. ncores Integer specifying number cores use parallel processing via parallel::mclapply. seed Random seed reproducibility. Default 123.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fit_marginals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit conditional margins to standard Gaussian distributions for a list of genes. — fit_marginals","text":"list containing two matrices: marginal matrix transformed values gene, transformed follow standard normal distribution. residual matrix values transformed standard uniform distribution (applying Gaussian quantile function).","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fit_marginals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit conditional margins to standard Gaussian distributions for a list of genes. — fit_marginals","text":"","code":"data(test_data) # Fit standardized marginals for gene expressions marginal_res <- fit_marginals(   gene_list = test_data$gene_list,   count_mat = test_data$count_mat,   cov_mat = test_data$cov_mat,   formula1 = \"layer_annotations\",   family1 = \"nb\",   DT = TRUE,   epsilon = 1e-6,   ncores = 2 )"},{"path":"https://chexjiang.github.io/spCorr/reference/fit_products.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit product distributions to standardized gene expressions for a list of gene pairs. — fit_products","title":"Fit product distributions to standardized gene expressions for a list of gene pairs. — fit_products","text":"function fits product distributions gene pairs using standardized expression values. applies Generalized Additive Model (GAM) pair genes gene_pair_list model joint effect incorporating covariates.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fit_products.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit product distributions to standardized gene expressions for a list of gene pairs. — fit_products","text":"","code":"fit_products(   gene_pair_list_subset,   product_list,   cov_mat,   formula2,   family2 = quasiproductr(),   control = list(),   ncores,   global_test,   critical_value = 0.05,   return_models = FALSE,   return_coefs = FALSE,   preconstruct_smoother = FALSE )"},{"path":"https://chexjiang.github.io/spCorr/reference/fit_products.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit product distributions to standardized gene expressions for a list of gene pairs. — fit_products","text":"gene_pair_list_subset data frame matrix gene pairs passed filtering (e.g., via Moran's test). product_list named list product vectors corresponding gene expression cross-products. cov_mat matrix data frame containing covariates (e.g., spatial coordinates like x1, x2). formula2 formula string specifying GAM structure modeling spatial interactions (e.g., s(x1, x2)). family2 distribution family used model fitting. Default quasiproductr(), must defined elsewhere. control list control parameters passed mgcv::gam(). ncores Number cores use parallel processing mclapply. global_test Method global testing product models. Options: \"lrt\" (likelihood ratio test) \"wald\" (Wald-style smooth term test). Default \"wald\". return_models Logical; TRUE, returns full model object gene pair. return_coefs Logical; TRUE, returns model coefficients variance-covariance matrices. preconstruct_smoother Logical; TRUE, modifies smoother basis (e.g., 'tp' 'tpcached') caching speed optimization. Default FALSE.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fit_products.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit product distributions to standardized gene expressions for a list of gene pairs. — fit_products","text":"list element corresponds gene pair. contents depend return_models return_coefs: res_global Result global test (either p-value list EDF p-value). fitted_rho Fitted values GAM. model (Optional) Full mgcv::gam object, return_models = TRUE. model_coef (Optional) List beta (coefficients) beta_cov (variance-covariance matrix), return_coefs = TRUE.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fit_products.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit product distributions to standardized gene expressions for a list of gene pairs. — fit_products","text":"","code":"data(test_data) # Fit standardized marginals for gene expressions marginal_res <- fit_marginals(   gene_list = test_data$gene_list,   count_mat = test_data$count_mat,   cov_mat = test_data$cov_mat,   formula1 = \"layer_annotations\",   family1 = \"nb\",   DT = TRUE,   epsilon = 1e-6,   ncores = 2 )  # Compute gene pair products and optionally subset based on Moran's I check_result <- check_products(   gene_pair_list = test_data$gene_pair_list,   marginals = marginal_res$marginal,   cov_mat = test_data$cov_mat,   check_morani = FALSE,   ncores = 2 )  # Fit product distributions to gene_pair_list_subset model_list <- fit_products(   gene_pair_list_subset = check_result$gene_pair_list_subset,   product_list = check_result$product_list,   cov_mat = test_data$cov_mat,   formula2 = \"s(x1, x2, bs='tp', k=50)\",   family2 = quasiproductr(),   control = list(),   ncores = 2,   global_test = \"wald\",   return_models = FALSE,   return_coefs = FALSE,   preconstruct_smoother = TRUE ) #> Warning: all scheduled cores encountered errors in user code"},{"path":"https://chexjiang.github.io/spCorr/reference/fix.family.link.family.html","id":null,"dir":"Reference","previous_headings":"","what":"Redefine fix.family.link.family to add derivatives to a family object — fix.family.link.family","title":"Redefine fix.family.link.family to add derivatives to a family object — fix.family.link.family","text":"function adds second, third, fourth derivatives link function respect mu family object, used Newton-like optimization.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fix.family.link.family.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redefine fix.family.link.family to add derivatives to a family object — fix.family.link.family","text":"","code":"# S3 method for class 'family' fix.family.link(fam)"},{"path":"https://chexjiang.github.io/spCorr/reference/fix.family.link.family.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redefine fix.family.link.family to add derivatives to a family object — fix.family.link.family","text":"fam family object add derivatives.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/fix.family.link.family.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redefine fix.family.link.family to add derivatives to a family object — fix.family.link.family","text":"modified family object additional components derivatives.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/quasiproductr.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a custom family called 'quasiproductr' to be used with the mgcv package. — quasiproductr","title":"Define a custom family called 'quasiproductr' to be used with the mgcv package. — quasiproductr","text":"quasiproductr family models relationships link function hyperbolic arctangent (artanh). family defines custom link, variance, residual, initialization functions use Generalized Additive Models (GAM).","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/quasiproductr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a custom family called 'quasiproductr' to be used with the mgcv package. — quasiproductr","text":"","code":"quasiproductr(link = \"artanh\")"},{"path":"https://chexjiang.github.io/spCorr/reference/quasiproductr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a custom family called 'quasiproductr' to be used with the mgcv package. — quasiproductr","text":"link link function used. Default \"artanh\".","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/quasiproductr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a custom family called 'quasiproductr' to be used with the mgcv package. — quasiproductr","text":"family object compatible mgcv, including variance, link functions, residual deviance calculation.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/spCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"The wrapper for the whole spCorr pipeline — spCorr","title":"The wrapper for the whole spCorr pipeline — spCorr","text":"function fits conditional margins models local correlation given list genes gene pairs using GAM-based models. also performs statistical testing identify significant patterns gene co-expression.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/spCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The wrapper for the whole spCorr pipeline — spCorr","text":"","code":"spCorr(   count_mat,   gene_list,   gene_pair_list,   cov_mat,   formula1 = \"1\",   family1 = \"nb\",   formula2 = \"s(x1, x2, bs='tp', k=50)\",   family2 = quasiproductr(),   DT = TRUE,   global_test = \"wald\",   return_models = FALSE,   return_coefs = FALSE,   check_morani = FALSE,   preconstruct_smoother = TRUE,   ncores = 2,   control = list(),   epsilon = 1e-06,   seed = 123 )"},{"path":"https://chexjiang.github.io/spCorr/reference/spCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The wrapper for the whole spCorr pipeline — spCorr","text":"count_mat matrix raw gene expression counts (genes spots/cells). gene_list vector gene names row indices marginals fit. gene_pair_list two-column data frame matrix specifying gene pairs (name index). cov_mat data frame covariates used marginal product fitting (must contain x1 x2 spatial coordinates). formula1 Formula string specifying model structure marginals (e.g., \"~ covariate\"). Use \"1\" intercept-. family1 Distribution family marginal models. Options: \"gaussian\", \"poisson\", \"nb\", \"zinb\". Default: \"nb\". formula2 Formula string specifying smoother GAMs (e.g., \"s(x1, x2, bs='tp', k=50)\"). family2 GAM family object product modeling (e.g., quasiproductr()). DT Logical; TRUE, applies discrete transformation marginals. Default TRUE. global_test Method global testing product models. Options: \"lrt\" (likelihood ratio test) \"wald\" (Wald-style smooth term test). Default \"wald\". return_models Logical; TRUE, returns full GAM model objects gene pair. Default FALSE. return_coefs Logical; TRUE, returns model coefficients variances. Default FALSE. check_morani Logical; TRUE, filters gene pairs using Moran's product. Default FALSE. preconstruct_smoother Logical; TRUE, replaces bs='tp'/'gp' tpcached/gpcached faster computation. Default TRUE. ncores Integer number cores parallel processing. Default 2. control list control parameters passed mgcv::gam() product fitting. epsilon small constant avoid boundary issues uniform--Gaussian transformation. Default 1e-6. seed Random seed reproducibility. Default 123.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/spCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The wrapper for the whole spCorr pipeline — spCorr","text":"named list containing: res_global vector adjusted p-values (FDR) global tests gene pair. res_local matrix local fitted values (spatial correlation estimates) pair across spatial spots. marginals matrix standardized marginal values (standard normal) gene. residuals matrix uniform-transformed residuals gene. model_list (Optional) List fitted GAM models return_models = TRUE. model_coef_list (Optional) List model coefficients return_coefs = TRUE.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/spCorr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The wrapper for the whole spCorr pipeline — spCorr","text":"pipeline consists : Fitting conditional marginal distributions individual genes. Calculating pairwise product expressions optionally filtering via Moran's . Fitting GAMs model local spatial correlations gene pairs. Outputting statistical results fitted values (models).","code":""},{"path":[]},{"path":"https://chexjiang.github.io/spCorr/reference/spCorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The wrapper for the whole spCorr pipeline — spCorr","text":"","code":"data(test_data) result <- spCorr(   count_mat = test_data$count_mat,   gene_list = test_data$gene_list,   gene_pair_list = test_data$gene_pair_list,   cov_mat = test_data$cov_mat,   formula1 = \"layer_annotations\",   family1 = \"nb\",   formula2 = \"s(x1, x2, bs='tp', k=50)\",   family2 = quasiproductr(),   DT = TRUE,   global_test = \"lrt\",   return_models = FALSE,   return_coefs = FALSE,   check_morani = FALSE,   preconstruct_smoother = TRUE,   ncores = 2,   control = list(),   epsilon = 1e-6,   seed = 123 ) #> Start Marginal Fitting for 20 genes #> Start Extracting Spatially Varying Gene Pairs #> Start Product Fitting for 10 gene pairs"},{"path":"https://chexjiang.github.io/spCorr/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Data for spCorr Package — test_data","title":"Test Data for spCorr Package — test_data","text":"dataset containing example data used examples testing functions spCorr package.","code":""},{"path":"https://chexjiang.github.io/spCorr/reference/test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Data for spCorr Package — test_data","text":"","code":"data(test_data)"},{"path":"https://chexjiang.github.io/spCorr/reference/test_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test Data for spCorr Package — test_data","text":"list following components: count_mat matrix raw counts count_mat matrix normalized counts gene_list list genes gene_pair_list list gene pairs cov_mat matrix covariates","code":""}]
